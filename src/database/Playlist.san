/*
 *  Copyright (c) 2014  Salvatore Valente <svalente@mit.edu>
 *
 *  This program is free software.  You can modify and distribute it under
 *  the terms of the GNU General Public License.  There is no warranty.
 *  See the file "COPYING" for more information.
 */
package albumish.database;

/**
 * Playlist is simply a list of song IDs. Each song in a playlist also has a Playlist ID (pid),
 * which makes it possible to "mark" songs in a playlist.
 *
 * You are playing the Nth song in the playlist, which has PID X. Then, you delete the first song in
 * the playlist. Now, you are playing the (N-1)th song in the playlist, but it is still PID X.
 */
class Playlist {
    String name;
    int id;

    private int[] song_list;
    private int[] pid_list;
    private int next_pid;
    private boolean is_changed;

    Playlist() {
        this.song_list = new int[];
        this.pid_list = new int[];
        this.next_pid = 1;
    }

    /**
     * Get the list of songids in the playlist for read-only access.
     */
    int[] get_song_list() {
        return this.song_list;
    }

    /**
     * Add a song to the end of the playlist.
     */
    void add(int songid) {
        this.song_list.add(songid);
        this.pid_list.add(this.next_pid);
        this.next_pid++;
        this.is_changed = true;
    }

    /**
     * Get the nth pid in the playlist.
     */
    int get_nth_pid(int song_idx) {
        if song_idx >= this.pid_list.length {
            return 0;
        }
        return this.pid_list[song_idx];
    }

    /**
     * Given a pid, find its current index in the playlist.
     */
    int get_idx_of_pid(int pid) {
        for var idx = 0; idx < this.pid_list.length; idx++ {
            if this.pid_list[idx] == pid {
                return idx;
            }
        }
        return -1;
    }

    /**
     * Get the pid of the song in a location relative to another song.
     */
    int get_next_pid(int pid, int delta) {
        var idx = get_idx_of_pid(pid);
        if idx < 0 {
            return 0;
        }
        idx = idx + delta;
        if idx < 0 || idx >= this.pid_list.length {
            return 0;
        }
        return this.pid_list[idx];
    }

    /**
     * Given a pid, find the corresponding songid in the playlist.
     */
    int get_songid_of_pid(int pid) {
        var idx = get_idx_of_pid(pid);
        if idx < 0 {
            return 0;
        }
        return this.song_list[idx];
    }

    /**
     * Remove the nth song from the playlist.
     */
    void remove_song_by_idx(int idx) {
        this.song_list.delete(idx, 1);
        this.pid_list.delete(idx, 1);
        this.is_changed = true;
    }

    /**
     * Replace the playlist contents.
     */
    void reset(int[] new_song_list) {
        this.song_list.setLength(0);
        this.pid_list.setLength(0);
        if new_song_list != null {
            for var songid: new_song_list {
                add(songid);
            }
        }
    }
}
