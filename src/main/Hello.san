package main;
import gtk.Application;
import gtk.Widget;

class Hello {

static void main(String[] argv) {
    new Hello().run(argv);
}

void run(String[] argv)
{
    var app = new Application(null, 0);
    app.connect("activate", this);
    app.run(argv);
    app.unref();
}

void callback(Application app) {
    // create a new window, and set its title
    var window = Widget.window(app);
    window.setTitle("Window");
    window.setBorderWidth(10);

    // Here we construct the container that is going pack our buttons
    var grid = Widget.grid();

    // Pack the container in the window
    window.add(grid);

    var button = Widget.button("Button 1");
    button.connect("clicked", new {
        void callback(Widget button) {
            System.println("Hello, world!");
        }
    });

    // Place the first button in the grid cell (0, 0), and make it fill
    // just 1 cell horizontally and vertically (ie no spanning)
    grid.attach(button, 0, 0, 1, 1);

    button = Widget.button("Button 2");
    button.connect("clicked", new {
        void callback(Widget button) {
            System.println("Hello, world! (2)");
        }
    });

    // Place the second button in the grid cell (1, 0), and make it fill
    // just 1 cell horizontally and vertically (ie no spanning)
    grid.attach(button, 1, 0, 1, 1);

    button = Widget.button("Quit");
    button.connect("clicked", new {
        window: window;
        void callback(Widget button) {
            this.window.destroy();
        }
    });

    // Place the Quit button in the grid cell (0, 1), and make it
    // span 2 columns.
    grid.attach(button, 0, 1, 2, 1);

    // Now that we are done packing our widgets, we show them all
    // in one go, by calling gtk_widget_show_all() on the window.
    // This call recursively calls gtk_widget_show() on all widgets
    // that are contained in the window, directly or indirectly.
    window.showAll();
}
}
