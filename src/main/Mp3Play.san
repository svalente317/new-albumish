package main;
import audio.Mpg123;
import audio.PulseAudio;

class Mp3Play {

static void main(String[] argv) {
    var filename = argv[1];
    Mpg123.init();
    var mpg = new Mpg123();
    var err = mpg.open(filename);
    if err != 0 {
        System.println("open: " + err);
        return;
    }
    // Get this file's default rate and channels.
    var fmt = mpg.get_format();
    System.println("rate=" + fmt.rate + " cha=" + fmt.channels + " enc=" + fmt.encoding);

    // Tell mpg123 to encode samples in signed 16-bit format.
    err = mpg.format_none();
    if err != 0 {
        System.println("format_none: " + err);
        return;
    }
    err = mpg.set_format(fmt.rate, fmt.channels, Mpg123.SIGNED_16_ENCODING);
    if err != 0 {
        System.println("format_none: " + err);
        return;
    }

    // The number of bytes in a 16-bit sample is 2 bytes (16 bits) * the channels.
    var sampleSize = 2 * fmt.channels;
    // fmt.rate is the number of samples per second, typically 44,100.
    var bytesPerSecond = fmt.rate * sampleSize;
    // Read a quarter-second at a time.
    var bufferSize = (int)(bytesPerSecond / 4);

    // Technically, we should select SIGNED_16_LE_FORMAT or SIGNED_16_BE_FORMAT,
    // depending on the host's endian-ness. But it's fair to assume LE.
    var pulse = new PulseAudio("mp3play", "playback",
        fmt.rate, fmt.channels, PulseAudio.SIGNED_16_LE_FORMAT);

    var buffer = new byte[](bufferSize);
    while true {
        var size = mpg.read(buffer);
        if size <= 0 {
            break;
        }
        pulse.write(buffer, size);
    }
    System.println("final err: " + mpg.strerror());

    pulse.free();
    mpg.close();
    mpg.delete();
    Mpg123.exit();
}

}
