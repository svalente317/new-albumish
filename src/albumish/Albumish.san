/*
 *  Copyright (c) 2014  Salvatore Valente <svalente@mit.edu>
 *
 *  This program is free software.  You can modify and distribute it under
 *  the terms of the GNU General Public License.  There is no warranty.
 *  See the file "COPYING" for more information.
 */
package albumish;
import sanka.io.File;
import gtk.Application;
import gtk.Grid;
import gtk.ScrolledWindow;
import gtk.Window;
import albumish.database.CheckDatabase;
import albumish.database.Database;
import albumish.database.Playlist;
import albumish.database.Song;
import albumish.filter.Filter;
import albumish.filter.FilterWorker;

class Albumish {

const AUTO_PLAYLIST = 0;

Database database;
CheckDatabase check_database;
FilterWorker filter_worker;
Playlist[] playlists;
PlayerThread player_thread;
TopPanel top_panel;
CoverPanel cover_panel;
SongPanel playlist_song_panel;
SongPanel album_song_panel;

static void main(String[] argv) {
    new Albumish().run(argv);
}

void run(String[] argv)
{
    var app = new Application(null, 0);
    app.connect("activate", this);
    app.run(argv);
    app.unref();
}

void callback(Application app) {
    var home = new File(System.getenv("HOME"));
    var directory = new File(home, ".albumish");
    this.database = new Database();
    this.database.load(directory, "database.json");
    this.check_database = new CheckDatabase(this.database, directory, "checked_songs.list");
    // this.config = new Configuration(directory, "config.json");
    // this.playlists = new PlaylistCollection(this.database, directory);
    this.playlists = {new Playlist()};
    // this.num_random_playlists = this.playlists.get_max_with_prefix(RANDOM_PLAYLIST_PREFIX);
    // directory = new File(home, "Pictures/covers");
    // this.gallery = new Gallery(this, directory, COVER_SIZES);
    this.filter_worker = new FilterWorker(this.database); // , this.check_database);
    this.player_thread = new PlayerThread(this);

    var window = new Window(app);
    window.set_title("Albumish");
    // window.setImage(get_icon("CD.png"));
    window.set_border_width(10);
    var grid = new Grid();
    grid.set_row_spacing(10);
    grid.set_column_spacing(10);
    window.add(grid);

    // makeMenuBar(this.main_window);
    this.top_panel = new TopPanel(this);
    grid.attach(this.top_panel.widget(), 0, 0, 3, 1);
    var widget = null;
    var scrolledWindow = null;

    this.cover_panel = new CoverPanel(this);
    widget = this.cover_panel.widget();
    widget.set_expand(true, true);
    scrolledWindow = new ScrolledWindow();
    scrolledWindow.set_policy(ScrolledWindow.POLICY_AUTOMATIC, ScrolledWindow.POLICY_AUTOMATIC);
    scrolledWindow.set_shadow_type(ScrolledWindow.SHADOW_OUT);
    scrolledWindow.add(widget);
    grid.attach(scrolledWindow, 0, 1, 3, 1);

    var sortPanel = new SortPanel(this);
    widget = sortPanel.widget();
    widget.set_expand(false, false);
    grid.attach(widget, 0, 2, 1, 1);

    this.playlist_song_panel = new SongPanel(this, false);
    widget = this.playlist_song_panel.widget();
    widget.set_expand(true, true);
    scrolledWindow = new ScrolledWindow();
    scrolledWindow.set_policy(ScrolledWindow.POLICY_AUTOMATIC, ScrolledWindow.POLICY_AUTOMATIC);
    scrolledWindow.set_shadow_type(ScrolledWindow.SHADOW_OUT);
    scrolledWindow.add(widget);
    grid.attach(scrolledWindow, 1, 2, 1, 2);

    this.album_song_panel = new SongPanel(this, true);
    widget = this.album_song_panel.widget();
    widget.set_expand(true, true);
    scrolledWindow = new ScrolledWindow();
    scrolledWindow.set_policy(ScrolledWindow.POLICY_AUTOMATIC, ScrolledWindow.POLICY_AUTOMATIC);
    scrolledWindow.set_shadow_type(ScrolledWindow.SHADOW_OUT);
    scrolledWindow.add(widget);
    grid.attach(scrolledWindow, 2, 2, 1, 2);

    // this.playlist_panel = new PlaylistPanel(this, this.playlists);
    // data = new GridData(SWT.FILL, SWT.FILL, false, true);
    // data.heightHint = bounds.height / 5;
    // this.playlist_panel.getControl().setLayoutData(data);

    var albumList = this.filter_worker.generate_album_list();
    this.cover_panel.reset(albumList);
    window.set_size_request(1500, 500);
    window.showAll();
}

/**
 * Called by cover_panel. Update song_panel and album_song_panel.
 */
void select_album(int albumid) {
    if (albumid >= 0) {
        this.album_song_panel.update_database();
        var songList = this.filter_worker.generate_song_list(albumid);
        this.album_song_panel.reset(-1, songList);
    }
}

/**
 * Called by sort_panel. Update cover_panel.
 */
void sort_albums(int sort_type) {
    this.cover_panel.sort(sort_type);
}

/**
 * Called by song_panel. Update playlist panels.
 */
int set_autoplaylist(int[] songList) {
    var playlistid = AUTO_PLAYLIST;
    this.playlists[playlistid].reset(songList);
    // TODO this.playlistPanel.set...
    this.playlist_song_panel.reset(playlistid, songList);
    return playlistid;
}

/**
 * Called by top_panel.
 */
void do_previous() {
    // If you press Previous in the first 3 seconds of a song, then go to the previous song.
    // Otherwise, restart the current song.
    var delta = this.player_thread.get_audio_position_in_ms() < 3000.0 ? -1 : 0;
    this.player_thread.play_next_song(delta);
}

/**
 * Called by top_panel.
 */
void do_next() {
    this.player_thread.play_next_song(1);
}

/**
 * Called by top_panel.
 */
void play_or_pause() {
    if this.player_thread.is_paused {
        this.player_thread.pause(false);
        this.top_panel.display_pause_button();
        return;
    }
    if this.player_thread.is_playing() {
        this.player_thread.pause(true);
        this.top_panel.display_play_button();
        return;
    }
    var playlistid = this.playlist_song_panel.playlistid;
    if playlistid >= 0 {
        var songid = this.playlist_song_panel.get_selected_id();
        if songid > 0 {
            play_song(playlistid, songid);
        }
    }
}

/**
 * Called by playlist_song_panel and album_song_panel.
 */
void play_song(int playlistid, int songid) {
    this.player_thread.play_songid(playlistid, songid);
}

/**
 * Called by player_thread.
 */
void update_top_panel(Song song) {
    if song == null {
        this.top_panel.display(null, null, null, 0);
        return;
    }
    var artist_name = null;
    if song.artistid > 0 {
        artist_name = this.database.artist_list[song.artistid].name;
    }
    var album_name = null;
    if song.albumid > 0 {
        album_name = this.database.album_list[song.albumid].name;
    }
    this.top_panel.display(song.title, artist_name, album_name, song.duration);
}

void display_time(int millis) {
    this.top_panel.display_time(millis);
}

/**
 * Called by top_panel. Update cover_panel.
 */
void set_filter(String text) {
    var albumList = null;
    if text == null || text == "" {
        albumList = this.filter_worker.remove_filter(0);
    } else {
        var filter = new Filter(){text: text};
        albumList = this.filter_worker.add_filter(filter);
    }
    this.cover_panel.reset(albumList);
}

}
