/*
 *  Copyright (c) 2014  Salvatore Valente <svalente@mit.edu>
 *
 *  This program is free software.  You can modify and distribute it under
 *  the terms of the GNU General Public License.  There is no warranty.
 *  See the file "COPYING" for more information.
 */
package albumish;
import sanka.json.JsonElement;
import gtk.CellRenderer;
import gtk.ListStore;
import gtk.TreeIter;
import gtk.TreePath;
import gtk.TreeView;
import gtk.TreeViewColumn;
import gtk.Widget;

class SongPanel {

private Albumish player;
private TreeView tree_view;
private ListStore list_store;
private boolean show_bitrate;
private boolean show_bpm;
int playlistid;

SongPanel(Albumish player, boolean with_checks) {
    this.playlistid = -1;
    this.player = player;
    this.tree_view = new TreeView();

    // list_store column 0 is the song's checkmark state.
    var types = new int[];
    var checkRenderer = null;
    if with_checks {
        checkRenderer = CellRenderer.toggle();
        var column = new TreeViewColumn("", checkRenderer, true, "active", types.length);
        this.tree_view.append_column(column);
    }
    types.add(ListStore.TYPE_BOOLEAN);

    // list_store column 1 is the song's datbase ID.
    types.add(ListStore.TYPE_INT);

    // list_store columns 2 through 9 are visible -- track, title, time, artist, etc.
    var renderer = CellRenderer.text();
    var column = new TreeViewColumn("", renderer, true, "text", types.length);
    this.tree_view.append_column(column);
    types.add(ListStore.TYPE_STRING);
    column = new TreeViewColumn("Title", renderer, true, "text", types.length);
    this.tree_view.append_column(column);
    types.add(ListStore.TYPE_STRING);
    column = new TreeViewColumn("Time", renderer, true, "text", types.length);
    this.tree_view.append_column(column);
    types.add(ListStore.TYPE_STRING);
    column = new TreeViewColumn("Artist", renderer, true, "text", types.length);
    this.tree_view.append_column(column);
    types.add(ListStore.TYPE_STRING);
    column = new TreeViewColumn("Album", renderer, true, "text", types.length);
    this.tree_view.append_column(column);
    types.add(ListStore.TYPE_STRING);
    column = new TreeViewColumn("Year", renderer, true, "text", types.length);
    this.tree_view.append_column(column);
    types.add(ListStore.TYPE_STRING);
    if this.show_bitrate {
        column = new TreeViewColumn("bitrate", renderer, true, "text", types.length);
        this.tree_view.append_column(column);
    }
    types.add(ListStore.TYPE_STRING);
    if (this.show_bpm) {
        column = new TreeViewColumn("BPM", renderer, true, "text", types.length);
        this.tree_view.append_column(column);
    }
    types.add(ListStore.TYPE_STRING);
    this.list_store = new ListStore(types);
    this.tree_view.set_model(this.list_store);
    this.tree_view.connect_row_activated(this);
    if checkRenderer != null {
        checkRenderer.connect("toggled", this);
    }
}

Widget widget() {
    return this.tree_view;
}

void reset(int playlistid, int[] songs) {
    this.playlistid = playlistid;
    var database = this.player.database;
    var check_database = this.player.check_database;
    var row = {new JsonElement(), new JsonElement(), new JsonElement(), new JsonElement(),
               new JsonElement(), new JsonElement(), new JsonElement(), new JsonElement(),
               new JsonElement(), new JsonElement()};
    var num_songs = (songs == null ? 0 : songs.length);
    this.list_store.clear();
    var iter = new TreeIter();
    var valid = false;
    for var idx = 0; idx < num_songs; idx++ {
        this.list_store.append(iter);
        var song = database.song_list[songs[idx]];
        row[0].makeBoolean(check_database.get(song.id));
        row[1].makeInt(song.id);
        row[2].makeString(song.track_number > 0 ? "" + song.track_number : null);
        row[3].makeString(song.title);
        var duration = "";
        if song.duration > 0 {
            var min = song.duration / 60;
            var sec = song.duration % 60;
            duration = "" + min + ":" + (sec < 10 ? "0" : "") + sec;
        }
        row[4].makeString(duration);
        row[5].makeString(song.artistid > 0 ? database.artist_list[song.artistid].name : null);
        row[6].makeString(song.albumid > 0 ? database.album_list[song.albumid].name : null);
        row[7].makeString(song.year > 0 ? "" + song.year : null);
        row[8].makeString(song.bitrate);
        row[9].makeString(song.bitrate);
        this.list_store.set(iter, row);
    }
}

void update_database() {
    // TODO
}

void row_activated(TreeView tree_view, TreePath path, TreeViewColumn column) {
    var activeRow = path.get_first_index();
    if activeRow < 0 {
        return;
    }
    if this.playlistid >= 0 {
        var iter = new TreeIter();
        if this.list_store.get_iter(iter, path) {
            var value = new JsonElement();
            this.list_store.get_value(iter, 1, value);
            this.player.play_song(this.playlistid, value.getAsInt());
        }
        return;
    }
    var songList = new int[];
    var currentRow = 0;
    var songid = 0;
    var iter = new TreeIter();
    var value = new JsonElement();
    for var ok = this.list_store.get_iter_first(iter); ok; ok = this.list_store.iter_next(iter) {
        this.list_store.get_value(iter, 0, value);
        if value.getAsBoolean() || currentRow == activeRow {
            this.list_store.get_value(iter, 1, value);
            songList.add(value.getAsInt());
            if currentRow == activeRow {
                songid = value.getAsInt();
            }
        }
        currentRow = currentRow + 1;
    }
    var listid = this.player.set_autoplaylist(songList);
    this.player.play_song(listid, songid);
}

void path_callback(String path) {
    var iter = new TreeIter();
    if this.list_store.get_iter_from_string(iter, path) {
        var value = new JsonElement();
        this.list_store.get_value(iter, 0, value);
        var checked = value.getAsBoolean();
        value.makeBoolean(!checked);
        this.list_store.set(iter, {value});
    }
}

int get_selected_id() {
    var iter = new TreeIter();
    if !this.tree_view.get_selection().get_selected(iter) {
        System.println("zero");
        return 0;
    }
    var value = new JsonElement();
    this.list_store.get_value(iter, 1, value);
    return value.getAsInt();
}
}
