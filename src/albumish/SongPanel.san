/*
 *  Copyright (c) 2014  Salvatore Valente <svalente@mit.edu>
 *
 *  This program is free software.  You can modify and distribute it under
 *  the terms of the GNU General Public License.  There is no warranty.
 *  See the file "COPYING" for more information.
 */
package albumish;
import sanka.json.JsonElement;
import gtk.CellRenderer;
import gtk.ListStore;
import gtk.TreePath;
import gtk.TreeView;
import gtk.TreeViewColumn;
import gtk.Widget;

class SongPanel {

private Albumish player;
private TreeView treeView;
private ListStore listStore;
private boolean showBitrate;
private boolean showBpm;
private int playlistid;

SongPanel(Albumish player, boolean with_checks) {
    this.playlistid = -1;
    this.player = player;
    this.treeView = new TreeView();

    // listStore column 0 is the song's checkmark state.
    var types = new int[];
    var checkRenderer = null;
    if with_checks {
        checkRenderer = CellRenderer.toggle();
        var column = new TreeViewColumn("", checkRenderer, true, "active", types.length);
        this.treeView.appendColumn(column);
    }
    types.add(ListStore.TYPE_BOOLEAN);

    // listStore column 1 is the song's datbase ID.
    types.add(ListStore.TYPE_INT);

    // listStore columns 2 through 9 are visible -- track, title, time, artist, etc.
    var renderer = CellRenderer.text();
    var column = new TreeViewColumn("", renderer, true, "text", types.length);
    this.treeView.appendColumn(column);
    types.add(ListStore.TYPE_STRING);
    column = new TreeViewColumn("Title", renderer, true, "text", types.length);
    this.treeView.appendColumn(column);
    types.add(ListStore.TYPE_STRING);
    column = new TreeViewColumn("Time", renderer, true, "text", types.length);
    this.treeView.appendColumn(column);
    types.add(ListStore.TYPE_STRING);
    column = new TreeViewColumn("Artist", renderer, true, "text", types.length);
    this.treeView.appendColumn(column);
    types.add(ListStore.TYPE_STRING);
    column = new TreeViewColumn("Album", renderer, true, "text", types.length);
    this.treeView.appendColumn(column);
    types.add(ListStore.TYPE_STRING);
    column = new TreeViewColumn("Year", renderer, true, "text", types.length);
    this.treeView.appendColumn(column);
    types.add(ListStore.TYPE_STRING);
    if this.showBitrate {
        column = new TreeViewColumn("bitrate", renderer, true, "text", types.length);
        this.treeView.appendColumn(column);
    }
    types.add(ListStore.TYPE_STRING);
    if (this.showBpm) {
        column = new TreeViewColumn("BPM", renderer, true, "text", types.length);
        this.treeView.appendColumn(column);
    }
    types.add(ListStore.TYPE_STRING);
    this.listStore = new ListStore(types);
    this.treeView.setModel(this.listStore);
    this.treeView.connectRowActivated(this);
    if checkRenderer != null {
        checkRenderer.connect("toggled", this);
    }
}

Widget widget() {
    return this.treeView;
}

void reset(int[] songs, int selected_idx) {
    var database = this.player.database;
    var checkDatabase = this.player.checkDatabase;
    var row = {new JsonElement(), new JsonElement(), new JsonElement(), new JsonElement(),
               new JsonElement(), new JsonElement(), new JsonElement(), new JsonElement(),
               new JsonElement(), new JsonElement()};
    var numSongs = (songs == null ? 0 : songs.length);
    var iter = new TreeIter();
    var valid = this.listStore.getIterFirst(iter);
    for var idx = 0; idx < numSongs; idx++ {
        if !valid {
            this.listStore.append(iter);
        }
        var song = database.song_list[songs[idx]];
        row[0].makeBoolean(checkDatabase.get(song.id));
        row[1].makeInt(song.id);
        row[2].makeString(song.track_number > 0 ? "" + song.track_number : null);
        row[3].makeString(song.title);
        var duration = "";
        if song.duration > 0 {
            var min = song.duration / 60;
            var sec = song.duration % 60;
            duration = "" + min + ":" + (sec < 10 ? "0" : "") + sec;
        }
        row[4].makeString(duration);
        row[5].makeString(song.artistid > 0 ? database.artist_list[song.artistid].name : null);
        row[6].makeString(song.albumid > 0 ? database.album_list[song.albumid].name : null);
        row[7].makeString(song.year > 0 ? "" + song.year : null);
        row[8].makeString(song.bitrate);
        row[9].makeString(song.bitrate);
        this.listStore.set(iter, row);
        valid = this.listStore.iterNext(iter);
    }
    while valid {
        valid = this.listStore.remove(iter);
    }
    // TODO this.table.deselectAll();
    // if (selected_idx >= 0 && selected_idx < num_songs) {
    //     this.table.select(selected_idx);
    // }
}

void updateDatabase() {
    // TODO
}

void rowActivated(TreeView treeView, TreePath path, TreeViewColumn column) {
    var activeRow = path.getFirstIndex();
    if activeRow < 0 {
        return;
    }
    if this.playlistid >= 0 {
        this.player.playSong(this.playlistid, activeRow);
        return;
    }
    var songList = new int[];
    var currentRow = 0;
    var songListActiveRow = 0;
    var iter = new TreeIter();
    var value = new JsonElement();
    for var ok = this.listStore.getIterFirst(iter); ok; ok = this.listStore.iterNext(iter) {
        if currentRow == activeRow {
            songListActiveRow = songList.length;
        }
        // TODO if is_checked || currentRow == activeRow
        this.listStore.getValue(iter, 1, value);
        songList.add(value.getAsInt());
        currentRow = currentRow + 1;
    }
    var listid = this.player.setAutoPlaylist(songList);
    this.player.playSong(listid, songListActiveRow);
}

void pathCallback(String path) {
    var iter = new TreeIter();
    if this.listStore.getIterFromString(iter, path) {
        var value = new JsonElement();
        this.listStore.getValue(iter, 0, value);
        var checked = value.getAsBoolean();
        value.makeBoolean(!checked);
        this.listStore.set(iter, {value});
    }
}
}
