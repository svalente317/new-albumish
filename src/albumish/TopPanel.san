/*
 *  Copyright (c) 2014  Salvatore Valente <svalente@mit.edu>
 *
 *  This program is free software.  You can modify and distribute it under
 *  the terms of the GNU General Public License.  There is no warranty.
 *  See the file "COPYING" for more information.
 */
package albumish;
import gtk.Button;
import gtk.Box;
import gtk.Entry;
import gtk.Frame;
import gtk.Grid;
import gtk.Label;
import gtk.Widget;

class TopPanel {
    private Albumish player;
    private Box panel;
    private Button prev_button;
    private Button play_button;
    private Button next_button;
    private Label title_label;
    private Label artist_label;
    private Slider time_scale;
    private Label time_label;
    private Label duration_label;
    private Entry filter_entry;
    private Button add_filter_button;
    private Label filter_label;
    private Button clear_filter_button;

    TopPanel(Albumish player) {
        this.player = player;

        this.panel = new Box(Box.HORIZONTAL, 0);
        this.panel.setExpand(true, false);
        this.panel.setSpacing(10);

        var top_left = new Frame(null);
        top_left.setExpand(false, true);
        var hbox = new Box(Box.HORIZONTAL, 0);
        hbox.setBorderWidth(10);
        hbox.setSpacing(10);
        this.prev_button = Button.newFromIconName("media-skip-backward", Button.SIZE_BUTTON);
        this.prev_button.setSizeRequest(50, 50);
        this.prev_button.connect("clicked", this);
        hbox.add(this.prev_button);
        this.play_button = Button.newFromIconName("media-playback-start", Button.SIZE_BUTTON);
        this.play_button.setSizeRequest(50, 50);
        this.play_button.connect("clicked", this);
        hbox.add(this.play_button);
        this.next_button = Button.newFromIconName("media-skip-forward", Button.SIZE_BUTTON);
        this.next_button.setSizeRequest(50, 50);
        this.next_button.connect("clicked", this);
        hbox.add(this.next_button);
        top_left.add(hbox);
        this.panel.add(top_left);

        var middle = new Frame(null);
        middle.setExpand(true, true);
        var vbox = new Box(Box.VERTICAL, 0);
        vbox.setBorderWidth(10);
        vbox.setSpacing(5);
        this.title_label = new Label("");
        vbox.add(this.title_label);
        this.artist_label = new Label("");
        vbox.add(this.artist_label);
        var bbox = new Box(Box.HORIZONTAL, 0);
        bbox.setSpacing(5);
        this.time_label = new Label("---:---");
        bbox.add(this.time_label);
        this.time_scale = new Slider(this);
        bbox.add(this.time_scale.widget());
        this.duration_label = new Label("---:---");
        bbox.add(this.duration_label);
        vbox.add(bbox);
        middle.add(vbox);
        this.panel.add(middle);

        var top_right = new Frame(null);
        top_right.setExpand(false, true);
        var grid = new Grid();
        grid.setBorderWidth(8);
        grid.setColumnSpacing(5);
        grid.setRowSpacing(5);
        this.filter_entry = new Entry();
        grid.attach(this.filter_entry, 0, 0, 1, 1);
        // data.widthHint = 170;
        this.add_filter_button = Button.newFromIconName("list-add", Button.SIZE_BUTTON);
        this.add_filter_button.connect("clicked", this);
        grid.attach(this.add_filter_button, 1, 0, 1, 1);
        this.filter_label = new Label("");
        this.filter_label.setExpand(true, false);
        grid.attach(this.filter_label, 0, 1, 1, 1);
        this.clear_filter_button = Button.newFromIconName("edit-clear", Button.SIZE_BUTTON);
        this.clear_filter_button.connect("clicked", this);
        grid.attach(this.clear_filter_button, 1, 1, 1, 1);
        top_right.add(grid);
        this.panel.add(top_right);
    }

    Widget widget() {
        return this.panel;
    }

    void display(String song_name, String artist_name, String album_name, int duration) {
        this.title_label.setText(song_name);
        if artist_name == null {
            artist_name = album_name;
        }
        this.artist_label.setText(artist_name);
        display_duration(duration);
    }

    private void display_duration(int duration) {
        this.time_scale.setSelection(0);
        if duration <= 0 {
            this.time_scale.setMaximum(0);
            this.time_label.setText("---:---");
            this.duration_label.setText("---:---");
        } else {
            this.time_scale.setMaximum(duration * 1000);
            this.time_label.setText("0:00");
            var seconds = duration % 60;
            var text = "" + duration / 60 + ":" + (seconds < 10 ? "0" : "") + seconds;
            this.duration_label.setText(text);
        }
        this.time_scale.widget().queueDraw();
    }

    void displayPlayButton() {
        // TODO this.play_button.setImage(this.play_icon);
    }

    void displayPauseButton() {
        // TODO this.play_button.setImage(this.pause_icon);
    }

    void display_time(int millis) {
        this.time_scale.setSelection(millis);
        var current_time = (int)(millis / 1000);
        var seconds = current_time % 60;
        var text = "" + current_time / 60 + ":" + (seconds < 10 ? "0" : "") + seconds;
        this.time_label.setText(text);
        this.time_scale.redraw();
    }

    void callback(Button button) {
        if button == this.prev_button {
            this.player.doPrevious();
            return;
        }
        if button == this.play_button {
            this.player.playOrPause();
            return;
        }
        if button == this.next_button {
            this.player.doNext();
            return;
        }
        if button == this.add_filter_button {
            var text = this.filter_entry.getText();
            if text == null || text == "" {
                return;
            }
            this.player.setFilter(text);
            this.filter_label.setText(text);
            this.filter_entry.setText("");
            return;
        }
        if button == this.clear_filter_button {
            this.player.setFilter(null);
            this.filter_label.setText("");
            // TODO grab_focus();
            return;
        }
    }

    void select(int value) {
        this.player.playerThread.do_audio_jump(value);
    }
}
