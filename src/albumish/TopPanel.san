/*
 *  Copyright (c) 2014  Salvatore Valente <svalente@mit.edu>
 *
 *  This program is free software.  You can modify and distribute it under
 *  the terms of the GNU General Public License.  There is no warranty.
 *  See the file "COPYING" for more information.
 */
package albumish;
import gtk.Button;
import gtk.Box;
import gtk.Frame;
import gtk.Label;
import gtk.Widget;

class TopPanel {
    private Albumish player;
    private Box panel;
    private Button prev_button;
    private Button play_button;
    private Button next_button;
    private Label title_label;
    private Label artist_label;
    private Slider time_scale;
    private Label time_label;
    private Label duration_label;
    // private Text filter_entry;
    // private Label filter_label;

    TopPanel(Albumish player) {
        this.player = player;

        this.panel = new Box(Box.HORIZONTAL, 0);
        this.panel.setExpand(true, false);
        this.panel.setSpacing(4);

        var top_left = new Frame(null);
        top_left.setExpand(false, true);
        var hbox = new Box(Box.HORIZONTAL, 0);
        hbox.setBorderWidth(10);
        hbox.setSpacing(10);
        this.prev_button = Button.newFromIconName("media-skip-backward", Button.SIZE_BUTTON);
        this.prev_button.setSizeRequest(50, 50);
        this.prev_button.connect("clicked", this);
        hbox.add(this.prev_button);
        this.play_button = Button.newFromIconName("media-playback-start", Button.SIZE_BUTTON);
        this.play_button.setSizeRequest(50, 50);
        this.play_button.connect("clicked", this);
        hbox.add(this.play_button);
        this.next_button = Button.newFromIconName("media-skip-forward", Button.SIZE_BUTTON);
        this.next_button.setSizeRequest(50, 50);
        this.next_button.connect("clicked", this);
        hbox.add(this.next_button);
        top_left.add(hbox);
        this.panel.add(top_left);

        var middle = new Frame(null);
        middle.setExpand(true, true);
        var vbox = new Box(Box.VERTICAL, 0);
        vbox.setBorderWidth(10);
        vbox.setSpacing(2);
        this.title_label = new Label("");
        vbox.add(this.title_label);
        this.artist_label = new Label("");
        vbox.add(this.artist_label);
        var bbox = new Box(Box.HORIZONTAL, 0);
        bbox.setSpacing(4);
        this.time_label = new Label("---:---");
        bbox.add(this.time_label);
        // this.time_label.setAlignment(SWT.RIGHT);
        this.time_scale = new Slider();
        bbox.add(this.time_scale.widget());
        this.duration_label = new Label("---:---");
        bbox.add(this.duration_label);
        vbox.add(bbox);
        middle.add(vbox);
        this.panel.add(middle);

        var top_right = new Frame(null);
        top_right.setExpand(false, true);
        this.panel.add(top_right);
        /*
        Composite filter_table = new Composite(this, SWT.BORDER);
        data = new GridData(SWT.END, SWT.FILL, false, true);
        filter_table.setLayoutData(data);
        layout = new GridLayout(2, false);
        layout.marginTop = 8;
        filter_table.setLayout(layout);
        this.filter_entry = new Text(filter_table, SWT.BORDER | SWT.SINGLE);
        this.filter_entry.setData(Cmd.FILTER_ENTRY);
        this.filter_entry.addSelectionListener(this);
        data = new GridData(SWT.FILL, SWT.CENTER, true, false);
        data.widthHint = 170;
        this.filter_entry.setLayoutData(daukebox.get_icon("gtk_media_play_ltr.png");ta);
        button = new Button(filter_table, SWT.PUSH);
        button.setImage(jukebox.get_icon("gtk_add.png"));
        button.setData(Cmd.ADD_FILTER_BUTTON);
        button.addSelectionListener(this);
        data = new GridData(SWT.FILL, SWT.FILL, false, false);
        button.setLayoutData(data);
        this.filter_label = new Label(filter_table, 0);
        data = new GridData(SWT.FILL, SWT.CENTER, true, false);
        this.filter_label.setLayoutData(data);
        button = new Button(filter_table, SWT.PUSH);
        button.setImage(jukebox.get_icon("gtk_cancel.png"));
        button.setData(Cmd.DELETE_FILTER_BUTTON);
        button.addSelectionListener(this);
        data = new GridData(SWT.FILL, SWT.FILL, false, false);
        button.setLayoutData(data);
        */
        // display_duration(0);
    }

    Widget widget() {
        return this.panel;
    }

    void display(String song_name, String artist_name, String album_name, int duration) {
        this.title_label.setText(song_name);
        if artist_name == null {
            artist_name = album_name;
        }
        this.artist_label.setText(artist_name);
        display_duration(duration);
    }

    private void display_duration(int duration) {
        this.time_scale.setSelection(0);
        if duration <= 0 {
            // this.time_scale.setEnabled(false);
            this.time_label.setText("---:---");
            this.duration_label.setText("---:---");
        } else {
            // this.time_scale.setEnabled(true);
            this.time_scale.setMaximum(duration * 1000);
            this.time_label.setText("0:00");
            var seconds = duration % 60;
            var text = "" + duration / 60 + ":" + (seconds < 10 ? "0" : "") + seconds;
            this.duration_label.setText(text);
        }
        this.time_scale.widget().queueDraw();
    }

    void displayPlayButton() {
        // TODO this.play_button.setImage(this.play_icon);
    }

    void displayPauseButton() {
        // TODO this.play_button.setImage(this.pause_icon);
    }

    void display_time(int millis) {
        this.time_scale.setSelection(millis);
        var current_time = (int)(millis / 1000);
        var seconds = current_time % 60;
        var text = "" + current_time / 60 + ":" + (seconds < 10 ? "0" : "") + seconds;
        this.time_label.setText(text);
        this.time_scale.widget().queueDraw();
    }

    /*
    @Override
    public void widgetSelected(SelectionEvent event) {
        if (event.widget.getData() == null) {
            return;
        }
        switch ((Cmd) event.widget.getData()) {
        case FILTER_ENTRY:
        case ADD_FILTER_BUTTON:
            String text = this.filter_entry.getText();
            if (text == null || text.isEmpty()) {
                return;
            }
            this.jukebox.set_filter(text);
            this.filter_label.setText(text);
            this.filter_entry.setText("");
            break;
        case DELETE_FILTER_BUTTON:
            this.jukebox.set_filter(null);
            this.filter_label.setText("");
            grab_focus();
            break;
        case TIME_SCALE:
            this.jukebox.do_audio_jump((float) event.detail);
            break;
        default:
            break;
        }
    }

    @Override
    public void widgetDefaultSelected(SelectionEvent event) {
        if (event.widget.getData() == Cmd.FILTER_ENTRY) {
            widgetSelected(event);
        }
    }
    */

    void callback(Button button) {
        if button == this.prev_button {
            this.player.doPrevious();
            return;
        }
        if button == this.play_button {
            this.player.playOrPause();
            return;
        }
        if button == this.next_button {
            this.player.doNext();
            return;
        }
    }
}
