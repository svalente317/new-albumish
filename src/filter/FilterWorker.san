/*
 *  Copyright (c) 2014  Salvatore Valente <svalente@mit.edu>
 *
 *  This program is free software.  You can modify and distribute it under
 *  the terms of the GNU General License.  There is no warranty.
 *  See the file "COPYING" for more information.
 */
package albumish.filter;
import sanka.util.StringUtils;
import albumish.database.Artist;
import albumish.database.Album;
import albumish.database.Database;
import albumish.database.Song;

class FilterWorker {

    private Database database;
    private String[] filter_list;

    FilterWorker(Database database) {
        this.database = database;
        this.filter_list = new String[];
    }

    /**
     * Replace filter(s) with the given filter and return the displayed albums.
     */
    int[] set_filter(String filter) {
        this.filter_list.setLength(0);
        this.filter_list.add(filter);
        return generate_album_list();
    }

    /**
     * Remove all filters and return the displayed albums.
     */
    int[] clear() {
        this.filter_list.setLength(0);
        return generate_album_list();
    }

    /**
     * For each album in the database, if the album contains at least one song that matches all
     * filters, then add the album to the given list.
     */
    int[] generate_album_list() {
        var album_list = new int[];
        var song_list = new int[];
        for var idx = 1; idx < this.database.album_list.length; idx++ {
            var album = this.database.album_list[idx];
            if process_album(album, song_list, false) {
                album_list.add(album.id);
            }
        }
        return album_list;
    }

    /**
     * For each song on the album, if the song matches all filters, then add it to the given list.
     *
     * @param find_all If true, then find all songs that match all filters. Otherwise, stop after
     *            the first song.
     */
    private boolean process_album(Album album, int[] song_list, boolean find_all) {
        if album.song_list == null {
            return false;
        }
        var new_filter_list = new String[];
        for var filter : this.filter_list {
            if !album_match(album, filter) {
                // Check the individual songs against this filter.
                new_filter_list.add(filter);
            }
        }
        for var songid : album.song_list {
            var song = this.database.song_list[songid];
            if is_song_displayed(song, new_filter_list) {
                if !find_all {
                    return true;
                }
                song_list.add(song.id);
            }
        }
        return false;
    }

    /**
     * @return true if the album matches the filter.
     */
    private boolean album_match(Album album, String filter) {
        if string_match(album.name, filter) {
            return true;
        }
        if album.artistid > 0 {
            var artist = this.database.artist_list[album.artistid];
            if string_match(artist.name, filter) {
                return true;
            }
        }
        return false;
    }

    /**
     * @return true if the song matches all filters.
     */
    private boolean is_song_displayed(Song song, String[] new_filter_list) {
        for var filter : new_filter_list {
            if !song_match(song, filter) {
                return false;
            }
        }
        return true;
    }

    /**
     * @return true if the song matches the filter.
     */
    private boolean song_match(Song song, String filter) {
        if string_match(song.title, filter) {
            return true;
        }
        if string_match(song.tags, filter) {
            return true;
        }
        if song.year > 0 && song.year == System.parseInt(filter) {
            return true;
        }
        if song.artistid > 0 {
            var artist = this.database.artist_list[song.artistid];
            if string_match(artist.name, filter) {
                return true;
            }
        }
        return false;
    }

    private boolean string_match(String song_text, String filter) {
        if song_text == null || filter == null {
            return false;
        }
        song_text = StringUtils.toLowerCase(song_text);
        filter = StringUtils.toLowerCase(filter);
        return song_text.find(filter) >= 0;
    }

    /**
     * For each song on the album, if the song matches all filters, then add it to the given list.
     */
    int[] generate_song_list(int albumid) {
        var album = this.database.album_list[albumid];
        var song_list = new int[];
        if album.song_list != null {
            process_album(album, song_list, true);
        }
        return song_list;
    }
}
